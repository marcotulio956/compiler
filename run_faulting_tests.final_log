
TESTING ./examples/t1.comp ---
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
DEBug Mode Enabled: (args3)
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
Lexical: File> ./examples/t1.compLexical: File> ./examples/t1.comp01: <"start", START>
02: <"int", TYPE INT>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - init as TKN_NONE
02: <"a", ID>
02: <",", COMMA>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - init as TKN_NONE
02: <"b", ID>
02: <";", SEMICOLON>
03: <"int", TYPE INT>
symboltable: new Lexeme Token [result] type (ID, UNASSIGNED)
	 - init as TKN_NONE
03: <"result", ID>
03: <";", SEMICOLON>
04: <"float", TYPE FLOAT>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
04: <"a", ID>
04: <",", COMMA>
symboltable: new Lexeme Token [x] type (ID, UNASSIGNED)
	 - init as TKN_NONE
04: <"x", ID>
04: <",", COMMA>
symboltable: new Lexeme Token [total] type (ID, UNASSIGNED)
	 - init as TKN_NONE
04: <"total", ID>
04: <";", SEMICOLON>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
06: <"a", ID>
06: <"=", ASSIGN>
06: <"2", INT>
06: <";", SEMICOLON>
symboltable: new Lexeme Token [x] type (ID, UNASSIGNED)
	 - returned
07: <"x", ID>
07: <"=", ASSIGN>
07: <"0.1", FLOAT>
07: <";", SEMICOLON>
08: <"scan", SCAN>
08: <"(", OPEN_PAR>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
08: <"b", ID>
08: <")", CLOSE_PAR>
08: <";", SEMICOLON>
09: <"scan", SCAN>
09: <"(", OPEN_PAR>
symboltable: new Lexeme Token [y] type (ID, UNASSIGNED)
	 - init as TKN_NONE
09: <"y", ID>
09: <")", CLOSE_PAR>
09: <";", SEMICOLON>
symboltable: new Lexeme Token [result] type (ID, UNASSIGNED)
	 - returned
10: <"result", ID>
10: <"=", ASSIGN>
10: <"(", OPEN_PAR>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
10: <"a", ID>
10: <"*", MUL>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
10: <"b", ID>
10: <"+", PLUS>
10: <"1", INT>
10: <")", CLOSE_PAR>
10: <"/", DIV>
10: <"2", INT>
10: <";", SEMICOLON>
11: <"print", PRINT>
11: <"(", OPEN_PAR>
symboltable: new Lexeme Token [Resultado] type (ID, UNASSIGNED)
	 - init as TKN_NONE
11: <"Resultado", ID>
11: <")", CLOSE_PAR>
11: <";", SEMICOLON>
12: <"print", PRINT>
12: <"(", OPEN_PAR>
symboltable: new Lexeme Token [result] type (ID, UNASSIGNED)
	 - returned
12: <"result", ID>
12: <")", CLOSE_PAR>
12: <";", SEMICOLON>
13: <"print", PRINT>
13: <"(", OPEN_PAR>
symboltable: new Lexeme Token [Total] type (ID, UNASSIGNED)
	 - init as TKN_NONE
13: <"Total", ID>
13: <")", CLOSE_PAR>
13: <";", SEMICOLON>
symboltable: new Lexeme Token [total] type (ID, UNASSIGNED)
	 - returned
14: <"total", ID>
14: <"=", ASSIGN>
symboltable: new Lexeme Token [y] type (ID, UNASSIGNED)
	 - returned
14: <"y", ID>
14: <"/", DIV>
symboltable: new Lexeme Token [x] type (ID, UNASSIGNED)
	 - returned
14: <"x", ID>
14: <";", SEMICOLON>
15: <"print", PRINT>
15: <"(", OPEN_PAR>
symboltable: new Lexeme Token [Total] type (ID, UNASSIGNED)
	 - returned
15: <"Total", ID>
15: <")", CLOSE_PAR>
15: <";", SEMICOLON>
16: <"print", PRINT>
16: <"(", OPEN_PAR>
symboltable: new Lexeme Token [total] type (ID, UNASSIGNED)
	 - returned
16: <"total", ID>
16: <")", CLOSE_PAR>
16: <";", SEMICOLON>
17: <"exit", EXIT>
18: <"", END_OF_FILE>
<procProgram>
	eat +START | curr =START - 'start'
	<procDeclList>
		<procDecl>
			<procType>
				eat +TYPE INT | curr =TYPE INT - 'int'
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
			<procIdentList>
smntc: checkLexeme [a](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'a'
				eat +COMMA | curr =COMMA - ','
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
smntc: checkLexeme [b](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'b'
			eat +SEMICOLON | curr =SEMICOLON - ';'
		<procDecl>
			<procType>
				eat +TYPE INT | curr =TYPE INT - 'int'
symboltable: new Lexeme Token [result] type (ID, UNASSIGNED)
	 - returned
			<procIdentList>
smntc: checkLexeme [result](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'result'
			eat +SEMICOLON | curr =SEMICOLON - ';'
		<procDecl>
			<procType>
				eat +TYPE FLOAT | curr =TYPE FLOAT - 'float'
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
			<procIdentList>
smntc: checkLexeme [a](TYPE INT) to type (TYPE FLOAT)
smntc error: Lexeme Token dType already declared [a]
symbolTable Identifiers
.1 Resultado -:- (ID, NONE)
.2 Total -:- (ID, NONE)
.3 a -:- (ID, TYPE INT)
.4 b -:- (ID, TYPE INT)
.5 result -:- (ID, TYPE INT)
.6 total -:- (ID, NONE)
.7 x -:- (ID, NONE)
.8 y -:- (ID, NONE)
TESTING ./examples/t2.comp ---
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
DEBug Mode Enabled: (args3)
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
Lexical: File> ./examples/t2.compLexical: File> ./examples/t2.comp01: <"start", START>
02: <"int", TYPE INT>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - init as TKN_NONE
02: <"a", ID>
02: <",", COMMA>
symboltable: new Lexeme Token [c_] type (ID, UNASSIGNED)
	 - init as TKN_NONE
02: <"c_", ID>
02: <",", COMMA>
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - init as TKN_NONE
02: <"c", ID>
02: <";", SEMICOLON>
03: <"float", TYPE FLOAT>
symboltable: new Lexeme Token [d] type (ID, UNASSIGNED)
	 - init as TKN_NONE
03: <"d", ID>
03: <",", COMMA>
symboltable: new Lexeme Token [e] type (ID, UNASSIGNED)
	 - init as TKN_NONE
03: <"e", ID>
03: <";", SEMICOLON>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
04: <"a", ID>
04: <"=", ASSIGN>
04: <"0", INT>
04: <";", SEMICOLON>
symboltable: new Lexeme Token [d] type (ID, UNASSIGNED)
	 - returned
04: <"d", ID>
04: <"=", ASSIGN>
04: <"3.5", FLOAT>
04: <";", SEMICOLON>
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
05: <"c", ID>
05: <"=", ASSIGN>
symboltable: new Lexeme Token [d] type (ID, UNASSIGNED)
	 - returned
05: <"d", ID>
05: <"/", DIV>
05: <"1.2", FLOAT>
05: <";", SEMICOLON>
symboltable: new Lexeme Token [Scan] type (ID, UNASSIGNED)
	 - init as TKN_NONE
07: <"Scan", ID>
07: <"(", OPEN_PAR>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
07: <"a", ID>
07: <")", CLOSE_PAR>
07: <";", SEMICOLON>
symboltable: new Lexeme Token [Scan] type (ID, UNASSIGNED)
	 - returned
08: <"Scan", ID>
08: <"(", OPEN_PAR>
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
08: <"c", ID>
08: <")", CLOSE_PAR>
08: <";", SEMICOLON>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - init as TKN_NONE
09: <"b", ID>
09: <"=", ASSIGN>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
09: <"a", ID>
09: <"*", MUL>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
09: <"a", ID>
09: <";", SEMICOLON>
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
10: <"c", ID>
10: <"=", ASSIGN>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
10: <"b", ID>
10: <"+", PLUS>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
10: <"a", ID>
10: <"*", MUL>
10: <"(", OPEN_PAR>
10: <"1", INT>
10: <"+", PLUS>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
10: <"a", ID>
10: <"*", MUL>
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
10: <"c", ID>
10: <")", CLOSE_PAR>
10: <";", SEMICOLON>
11: <"print", PRINT>
11: <"(", OPEN_PAR>
symboltable: new Lexeme Token [Resultado] type (ID, UNASSIGNED)
	 - init as TKN_NONE
11: <"Resultado", ID>
11: <")", CLOSE_PAR>
11: <";", SEMICOLON>
12: <"print", PRINT>
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
12: <"c", ID>
12: <";", SEMICOLON>
symboltable: new Lexeme Token [d] type (ID, UNASSIGNED)
	 - returned
13: <"d", ID>
13: <"=", ASSIGN>
13: <"34.2", FLOAT>
symboltable: new Lexeme Token [e] type (ID, UNASSIGNED)
	 - returned
14: <"e", ID>
14: <"=", ASSIGN>
symboltable: new Lexeme Token [val] type (ID, UNASSIGNED)
	 - init as TKN_NONE
14: <"val", ID>
14: <"+", PLUS>
14: <"2.2", FLOAT>
14: <";", SEMICOLON>
15: <"print", PRINT>
15: <"(", OPEN_PAR>
symboltable: new Lexeme Token [E] type (ID, UNASSIGNED)
	 - init as TKN_NONE
15: <"E", ID>
15: <")", CLOSE_PAR>
15: <";", SEMICOLON>
16: <"print", PRINT>
16: <"(", OPEN_PAR>
symboltable: new Lexeme Token [e] type (ID, UNASSIGNED)
	 - returned
16: <"e", ID>
16: <")", CLOSE_PAR>
16: <";", SEMICOLON>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
17: <"a", ID>
17: <"=", ASSIGN>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
17: <"b", ID>
17: <"+", PLUS>
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
17: <"c", ID>
17: <"+", PLUS>
symboltable: new Lexeme Token [d] type (ID, UNASSIGNED)
	 - returned
17: <"d", ID>
17: <")", CLOSE_PAR>
17: <"/", DIV>
17: <"2", INT>
17: <";", SEMICOLON>
17: <"", END_OF_FILE>
<procProgram>
	eat +START | curr =START - 'start'
	<procDeclList>
		<procDecl>
			<procType>
				eat +TYPE INT | curr =TYPE INT - 'int'
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
			<procIdentList>
smntc: checkLexeme [a](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'a'
				eat +COMMA | curr =COMMA - ','
symboltable: new Lexeme Token [c_] type (ID, UNASSIGNED)
	 - returned
smntc: checkLexeme [c_](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'c_'
				eat +COMMA | curr =COMMA - ','
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
smntc: checkLexeme [c](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'c'
			eat +SEMICOLON | curr =SEMICOLON - ';'
		<procDecl>
			<procType>
				eat +TYPE FLOAT | curr =TYPE FLOAT - 'float'
symboltable: new Lexeme Token [d] type (ID, UNASSIGNED)
	 - returned
			<procIdentList>
smntc: checkLexeme [d](NONE) to type (TYPE FLOAT)
				<procIdentifier>
					eat +ID | curr =ID : 'd'
				eat +COMMA | curr =COMMA - ','
symboltable: new Lexeme Token [e] type (ID, UNASSIGNED)
	 - returned
smntc: checkLexeme [e](NONE) to type (TYPE FLOAT)
				<procIdentifier>
					eat +ID | curr =ID : 'e'
			eat +SEMICOLON | curr =SEMICOLON - ';'
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
	<procStmtList>
		<procStmt>
			<procAssignStmt>
				<procIdentifier>
					eat +ID | curr =ID : 'a'
				eat +ASSIGN | curr =ASSIGN - '='
				<procSimpleExprA>
					<procTermA>
						<procFactorA>
							<procFactor>
								<procConstant>
									<procIntegerConst>
										eat +INT | curr =INT : '0'
						<procTermB>
					<procSimpleExprB>
			eat +SEMICOLON | curr =SEMICOLON - ';'
symboltable: new Lexeme Token [d] type (ID, UNASSIGNED)
	 - returned
		<procStmt>
			<procAssignStmt>
				<procIdentifier>
					eat +ID | curr =ID : 'd'
				eat +ASSIGN | curr =ASSIGN - '='
				<procSimpleExprA>
					<procTermA>
						<procFactorA>
							<procFactor>
								<procConstant>
									<procFloatConst>
										eat +FLOAT | curr =FLOAT : '3.5'
						<procTermB>
					<procSimpleExprB>
			eat +SEMICOLON | curr =SEMICOLON - ';'
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
		<procStmt>
			<procAssignStmt>
				<procIdentifier>
					eat +ID | curr =ID : 'c'
				eat +ASSIGN | curr =ASSIGN - '='
symboltable: new Lexeme Token [d] type (ID, UNASSIGNED)
	 - returned
				<procSimpleExprA>
					<procTermA>
						<procFactorA>
							<procFactor>
								<procIdentifier>
									eat +ID | curr =ID : 'd'
						<procTermB>
							<procMulOp>
								eat +DIV | curr =DIV - '/'
							<procFactorA>
								<procFactor>
									<procConstant>
										<procFloatConst>
											eat +FLOAT | curr =FLOAT : '1.2'
							<procTermB>
					<procSimpleExprB>
smntc: dtype error line 5: <procIdentifier>(TYPE INT) = <procSimpleExprA>(TYPE FLOAT)
TESTING ./examples/t3.comp ---
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
DEBug Mode Enabled: (args3)
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
Lexical: File> ./examples/t3.compLexical: File> ./examples/t3.comp01: <"int", TYPE INT>
symboltable: new Lexeme Token [pontuacao] type (ID, UNASSIGNED)
	 - init as TKN_NONE
01: <"pontuacao", ID>
01: <",", COMMA>
symboltable: new Lexeme Token [pontuacaoMaxina] type (ID, UNASSIGNED)
	 - init as TKN_NONE
01: <"pontuacaoMaxina", ID>
01: <",", COMMA>
symboltable: new Lexeme Token [disponibilidade] type (ID, UNASSIGNED)
	 - init as TKN_NONE
01: <"disponibilidade", ID>
01: <";", SEMICOLON>
02: <"string", TYPE STRING>
symboltable: new Lexeme Token [pontuacaoMinima] type (ID, UNASSIGNED)
	 - init as TKN_NONE
02: <"pontuacaoMinima", ID>
02: <";", SEMICOLON>
symboltable: new Lexeme Token [disponibilidade] type (ID, UNASSIGNED)
	 - returned
04: <"disponibilidade", ID>
04: <"=", ASSIGN>
symboltable: new Lexeme Token [Sim] type (ID, UNASSIGNED)
	 - init as TKN_NONE
04: <"Sim", ID>
04: <";", SEMICOLON>
symboltable: new Lexeme Token [pontuacaoMinima] type (ID, UNASSIGNED)
	 - returned
05: <"pontuacaoMinima", ID>
05: <"=", ASSIGN>
05: <"50", INT>
05: <";", SEMICOLON>
symboltable: new Lexeme Token [pontuacaoMaxima] type (ID, UNASSIGNED)
	 - init as TKN_NONE
06: <"pontuacaoMaxima", ID>
06: <"=", ASSIGN>
06: <"100", INT>
06: <";", SEMICOLON>
23: <"", UNEXPECTED_EOF>
<procProgram>
	eat +START | curr =TYPE INT - 'int'
showError
01: Unexpected Lexeme [int]
exec: DERIVATION TREE incomplete
Expected Lexeme [START]
TESTING ./examples/t4.comp ---
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
DEBug Mode Enabled: (args3)
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
Lexical: File> ./examples/t4.compLexical: File> ./examples/t4.comp01: <"start", START>
symboltable: new Lexeme Token [Int] type (ID, UNASSIGNED)
	 - init as TKN_NONE
03: <"Int", ID>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - init as TKN_NONE
03: <"a", ID>
03: <",", COMMA>
symboltable: new Lexeme Token [aux] type (ID, UNASSIGNED)
	 - init as TKN_NONE
03: <"aux", ID>
03: <",", COMMA>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - init as TKN_NONE
03: <"b", ID>
03: <";", SEMICOLON>
04: <"string", TYPE STRING>
symboltable: new Lexeme Token [nome] type (ID, UNASSIGNED)
	 - init as TKN_NONE
04: <"nome", ID>
04: <",", COMMA>
symboltable: new Lexeme Token [sobrenome] type (ID, UNASSIGNED)
	 - init as TKN_NONE
04: <"sobrenome", ID>
04: <",", COMMA>
symboltable: new Lexeme Token [msg] type (ID, UNASSIGNED)
	 - init as TKN_NONE
04: <"msg", ID>
04: <";", SEMICOLON>
05: <"print", PRINT>
05: <"(", OPEN_PAR>
symboltable: new Lexeme Token [Nome] type (ID, UNASSIGNED)
	 - init as TKN_NONE
05: <"Nome", ID>
05: <")", CLOSE_PAR>
05: <";", SEMICOLON>
06: <"scan", SCAN>
06: <"(", OPEN_PAR>
symboltable: new Lexeme Token [nome] type (ID, UNASSIGNED)
	 - returned
06: <"nome", ID>
06: <")", CLOSE_PAR>
06: <";", SEMICOLON>
07: <"print", PRINT>
07: <"(", OPEN_PAR>
symboltable: new Lexeme Token [Sobrenome] type (ID, UNASSIGNED)
	 - init as TKN_NONE
07: <"Sobrenome", ID>
07: <")", CLOSE_PAR>
07: <";", SEMICOLON>
08: <"scan", SCAN>
08: <"(", OPEN_PAR>
symboltable: new Lexeme Token [sobrenome] type (ID, UNASSIGNED)
	 - returned
08: <"sobrenome", ID>
08: <")", CLOSE_PAR>
08: <";", SEMICOLON>
symboltable: new Lexeme Token [msg] type (ID, UNASSIGNED)
	 - returned
09: <"msg", ID>
09: <"=", ASSIGN>
symboltable: new Lexeme Token [Ola] type (ID, UNASSIGNED)
	 - init as TKN_NONE
09: <"Ola", ID>
09: <",", COMMA>
09: <"+", PLUS>
symboltable: new Lexeme Token [nome] type (ID, UNASSIGNED)
	 - returned
09: <"nome", ID>
09: <"+", PLUS>
09: <"+", PLUS>
symboltable: new Lexeme Token [sobrenome] type (ID, UNASSIGNED)
	 - returned
10: <"sobrenome", ID>
10: <"+", PLUS>
10: <"!", NOT>
10: <";", SEMICOLON>
symboltable: new Lexeme Token [msg] type (ID, UNASSIGNED)
	 - returned
11: <"msg", ID>
11: <"=", ASSIGN>
symboltable: new Lexeme Token [msg] type (ID, UNASSIGNED)
	 - returned
11: <"msg", ID>
11: <"+", PLUS>
11: <"1", INT>
11: <";", SEMICOLON>
12: <"print", PRINT>
12: <"(", OPEN_PAR>
symboltable: new Lexeme Token [msg] type (ID, UNASSIGNED)
	 - returned
12: <"msg", ID>
12: <")", CLOSE_PAR>
12: <";", SEMICOLON>
13: <"scan", SCAN>
13: <"(", OPEN_PAR>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
13: <"a", ID>
13: <")", CLOSE_PAR>
13: <";", SEMICOLON>
14: <"scan", SCAN>
14: <"(", OPEN_PAR>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
14: <"b", ID>
14: <")", CLOSE_PAR>
14: <";", SEMICOLON>
15: <"if", IF>
15: <"(", OPEN_PAR>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
15: <"a", ID>
15: <">", GT>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
15: <"b", ID>
15: <")", CLOSE_PAR>
15: <"then", THEN>
symboltable: new Lexeme Token [aux] type (ID, UNASSIGNED)
	 - returned
16: <"aux", ID>
16: <"=", ASSIGN>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
16: <"b", ID>
16: <";", SEMICOLON>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
17: <"b", ID>
17: <"=", ASSIGN>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
17: <"a", ID>
17: <";", SEMICOLON>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
18: <"a", ID>
18: <"=", ASSIGN>
symboltable: new Lexeme Token [aux] type (ID, UNASSIGNED)
	 - returned
18: <"aux", ID>
18: <";", SEMICOLON>
19: <"end", END>
19: <";", SEMICOLON>
20: <"print", PRINT>
20: <"(", OPEN_PAR>
symboltable: new Lexeme Token [Apos] type (ID, UNASSIGNED)
	 - init as TKN_NONE
20: <"Apos", ID>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
20: <"a", ID>
symboltable: new Lexeme Token [troca] type (ID, UNASSIGNED)
	 - init as TKN_NONE
20: <"troca", ID>
20: <")", CLOSE_PAR>
20: <";", SEMICOLON>
symboltable: new Lexeme Token [out] type (ID, UNASSIGNED)
	 - init as TKN_NONE
21: <"out", ID>
21: <"(", OPEN_PAR>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
21: <"a", ID>
21: <")", CLOSE_PAR>
21: <";", SEMICOLON>
symboltable: new Lexeme Token [out] type (ID, UNASSIGNED)
	 - returned
22: <"out", ID>
22: <"(", OPEN_PAR>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
22: <"b", ID>
22: <")", CLOSE_PAR>
23: <"exit", EXIT>
24: <"", END_OF_FILE>
<procProgram>
	eat +START | curr =START - 'start'
symboltable: new Lexeme Token [Int] type (ID, UNASSIGNED)
	 - returned
	<procStmtList>
		<procStmt>
			<procAssignStmt>
				<procIdentifier>
					eat +ID | curr =ID : 'Int'
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
				eat +ASSIGN | curr =ID - 'a'
showError
03: Unexpected Lexeme [a]
exec: DERIVATION TREE incomplete
Expected Lexeme [ASSIGN]
TESTING ./examples/t5.comp ---
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
DEBug Mode Enabled: (args3)
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
Lexical: File> ./examples/t5.compLexical: File> ./examples/t5.comp01: <"start", START>
02: <"int", TYPE INT>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - init as TKN_NONE
02: <"a", ID>
02: <",", COMMA>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - init as TKN_NONE
02: <"b", ID>
02: <",", COMMA>
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - init as TKN_NONE
02: <"c", ID>
02: <",", COMMA>
symboltable: new Lexeme Token [maior] type (ID, UNASSIGNED)
	 - init as TKN_NONE
02: <"maior", ID>
02: <",", COMMA>
symboltable: new Lexeme Token [outro] type (ID, UNASSIGNED)
	 - init as TKN_NONE
02: <"outro", ID>
02: <";", SEMICOLON>
04: <"do", DO>
05: <"print", PRINT>
05: <"(", OPEN_PAR>
symboltable: new Lexeme Token [A] type (ID, UNASSIGNED)
	 - init as TKN_NONE
05: <"A", ID>
05: <")", CLOSE_PAR>
05: <";", SEMICOLON>
06: <"scan", SCAN>
06: <"(", OPEN_PAR>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
06: <"a", ID>
06: <")", CLOSE_PAR>
06: <";", SEMICOLON>
07: <"print", PRINT>
07: <"(", OPEN_PAR>
symboltable: new Lexeme Token [B] type (ID, UNASSIGNED)
	 - init as TKN_NONE
07: <"B", ID>
07: <")", CLOSE_PAR>
07: <";", SEMICOLON>
08: <"scan", SCAN>
08: <"(", OPEN_PAR>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
08: <"b", ID>
08: <")", CLOSE_PAR>
08: <";", SEMICOLON>
09: <"print", PRINT>
09: <"(", OPEN_PAR>
symboltable: new Lexeme Token [C] type (ID, UNASSIGNED)
	 - init as TKN_NONE
09: <"C", ID>
09: <")", CLOSE_PAR>
09: <";", SEMICOLON>
10: <"scan", SCAN>
10: <"(", OPEN_PAR>
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
10: <"c", ID>
10: <")", CLOSE_PAR>
10: <";", SEMICOLON>
12: <"if", IF>
12: <"(", OPEN_PAR>
12: <"(", OPEN_PAR>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
12: <"a", ID>
12: <">", GT>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
12: <"b", ID>
12: <")", CLOSE_PAR>
symboltable: new Lexeme Token [and] type (ID, UNASSIGNED)
	 - init as TKN_NONE
12: <"and", ID>
12: <"(", OPEN_PAR>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
12: <"a", ID>
12: <">", GT>
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
12: <"c", ID>
12: <")", CLOSE_PAR>
12: <")", CLOSE_PAR>
symboltable: new Lexeme Token [maior] type (ID, UNASSIGNED)
	 - returned
13: <"maior", ID>
13: <"=", ASSIGN>
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
13: <"a", ID>
15: <"else", ELSE>
16: <"if", IF>
16: <"(", OPEN_PAR>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
16: <"b", ID>
16: <">", GT>
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
16: <"c", ID>
16: <")", CLOSE_PAR>
16: <"then", THEN>
symboltable: new Lexeme Token [maior] type (ID, UNASSIGNED)
	 - returned
17: <"maior", ID>
17: <"=", ASSIGN>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
17: <"b", ID>
17: <";", SEMICOLON>
19: <"else", ELSE>
symboltable: new Lexeme Token [maior] type (ID, UNASSIGNED)
	 - returned
20: <"maior", ID>
20: <"=", ASSIGN>
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
20: <"c", ID>
20: <";", SEMICOLON>
21: <"end", END>
22: <"end", END>
23: <"print", PRINT>
23: <"(", OPEN_PAR>
symboltable: new Lexeme Token [Maior] type (ID, UNASSIGNED)
	 - init as TKN_NONE
23: <"Maior", ID>
symboltable: new Lexeme Token [valor] type (ID, UNASSIGNED)
	 - init as TKN_NONE
23: <"valor", ID>
23: <")", CLOSE_PAR>
23: <";", SEMICOLON>
24: <"print", PRINT>
24: <"(", OPEN_PAR>
symboltable: new Lexeme Token [maior] type (ID, UNASSIGNED)
	 - returned
24: <"maior", ID>
24: <")", CLOSE_PAR>
24: <";", SEMICOLON>
25: <"print", PRINT>
25: <"(", OPEN_PAR>
symboltable: new Lexeme Token [Outro] type (ID, UNASSIGNED)
	 - init as TKN_NONE
25: <"Outro", ID>
25: <")", CLOSE_PAR>
25: <";", SEMICOLON>
26: <"scan", SCAN>
26: <"(", OPEN_PAR>
symboltable: new Lexeme Token [outro] type (ID, UNASSIGNED)
	 - returned
26: <"outro", ID>
26: <")", CLOSE_PAR>
26: <";", SEMICOLON>
27: <"while", WHILE>
27: <"(", OPEN_PAR>
symboltable: new Lexeme Token [outro] type (ID, UNASSIGNED)
	 - returned
27: <"outro", ID>
27: <">=", GE>
27: <"0", INT>
27: <")", CLOSE_PAR>
27: <";", SEMICOLON>
28: <"exit", EXIT>
28: <"", END_OF_FILE>
<procProgram>
	eat +START | curr =START - 'start'
	<procDeclList>
		<procDecl>
			<procType>
				eat +TYPE INT | curr =TYPE INT - 'int'
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
			<procIdentList>
smntc: checkLexeme [a](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'a'
				eat +COMMA | curr =COMMA - ','
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
smntc: checkLexeme [b](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'b'
				eat +COMMA | curr =COMMA - ','
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
smntc: checkLexeme [c](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'c'
				eat +COMMA | curr =COMMA - ','
symboltable: new Lexeme Token [maior] type (ID, UNASSIGNED)
	 - returned
smntc: checkLexeme [maior](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'maior'
				eat +COMMA | curr =COMMA - ','
symboltable: new Lexeme Token [outro] type (ID, UNASSIGNED)
	 - returned
smntc: checkLexeme [outro](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'outro'
			eat +SEMICOLON | curr =SEMICOLON - ';'
	<procStmtList>
		<procStmt>
			<procWhileStmt>
				eat +DO | curr =DO - 'do'
				<procStmtList>
					<procStmt>
						<procWriteStmt>
							eat +PRINT | curr =PRINT - 'print'
							eat +OPEN_PAR | curr =OPEN_PAR - '('
symboltable: new Lexeme Token [A] type (ID, UNASSIGNED)
	 - returned
							<procWritable>
								<procSimpleExprA>
									<procTermA>
										<procFactorA>
											<procFactor>
												<procIdentifier>
													eat +ID | curr =ID : 'A'
										<procTermB>
									<procSimpleExprB>
							eat +CLOSE_PAR | curr =CLOSE_PAR - ')'
						eat +SEMICOLON | curr =SEMICOLON - ';'
					<procStmt>
						<procReadStmt>
							eat +SCAN | curr =SCAN - 'scan'
							eat +OPEN_PAR | curr =OPEN_PAR - '('
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
							<procIdentifier>
								eat +ID | curr =ID : 'a'
							eat +CLOSE_PAR | curr =CLOSE_PAR - ')'
						eat +SEMICOLON | curr =SEMICOLON - ';'
					<procStmt>
						<procWriteStmt>
							eat +PRINT | curr =PRINT - 'print'
							eat +OPEN_PAR | curr =OPEN_PAR - '('
symboltable: new Lexeme Token [B] type (ID, UNASSIGNED)
	 - returned
							<procWritable>
								<procSimpleExprA>
									<procTermA>
										<procFactorA>
											<procFactor>
												<procIdentifier>
													eat +ID | curr =ID : 'B'
										<procTermB>
									<procSimpleExprB>
							eat +CLOSE_PAR | curr =CLOSE_PAR - ')'
						eat +SEMICOLON | curr =SEMICOLON - ';'
					<procStmt>
						<procReadStmt>
							eat +SCAN | curr =SCAN - 'scan'
							eat +OPEN_PAR | curr =OPEN_PAR - '('
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
							<procIdentifier>
								eat +ID | curr =ID : 'b'
							eat +CLOSE_PAR | curr =CLOSE_PAR - ')'
						eat +SEMICOLON | curr =SEMICOLON - ';'
					<procStmt>
						<procWriteStmt>
							eat +PRINT | curr =PRINT - 'print'
							eat +OPEN_PAR | curr =OPEN_PAR - '('
symboltable: new Lexeme Token [C] type (ID, UNASSIGNED)
	 - returned
							<procWritable>
								<procSimpleExprA>
									<procTermA>
										<procFactorA>
											<procFactor>
												<procIdentifier>
													eat +ID | curr =ID : 'C'
										<procTermB>
									<procSimpleExprB>
							eat +CLOSE_PAR | curr =CLOSE_PAR - ')'
						eat +SEMICOLON | curr =SEMICOLON - ';'
					<procStmt>
						<procReadStmt>
							eat +SCAN | curr =SCAN - 'scan'
							eat +OPEN_PAR | curr =OPEN_PAR - '('
symboltable: new Lexeme Token [c] type (ID, UNASSIGNED)
	 - returned
							<procIdentifier>
								eat +ID | curr =ID : 'c'
							eat +CLOSE_PAR | curr =CLOSE_PAR - ')'
						eat +SEMICOLON | curr =SEMICOLON - ';'
					<procStmt>
						<procIfStmtA>
							eat +IF | curr =IF - 'if'
							<procCondition>
								<procExpressionA>
									<procSimpleExprA>
										<procTermA>
											<procFactorA>
												<procFactor>
													eat +OPEN_PAR | curr =OPEN_PAR - '('
													<procExpressionA>
														<procSimpleExprA>
															<procTermA>
																<procFactorA>
																	<procFactor>
																		eat +OPEN_PAR | curr =OPEN_PAR - '('
symboltable: new Lexeme Token [a] type (ID, UNASSIGNED)
	 - returned
																		<procExpressionA>
																			<procSimpleExprA>
																				<procTermA>
																					<procFactorA>
																						<procFactor>
																							<procIdentifier>
																								eat +ID | curr =ID : 'a'
																					<procTermB>
																				<procSimpleExprB>
																			<procExpressionB>
																				<procRelOp>
																					eat +GT | curr =GT - '>'
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - returned
																				<procSimpleExprA>
																					<procTermA>
																						<procFactorA>
																							<procFactor>
																								<procIdentifier>
																									eat +ID | curr =ID : 'b'
																						<procTermB>
																					<procSimpleExprB>
																		eat +CLOSE_PAR | curr =CLOSE_PAR - ')'
symboltable: new Lexeme Token [and] type (ID, UNASSIGNED)
	 - returned
																<procTermB>
															<procSimpleExprB>
														<procExpressionB>
													eat +CLOSE_PAR | curr =ID - 'and'
showError
12: Unexpected Lexeme [and]
exec: DERIVATION TREE incomplete
Expected Lexeme [CLOSE_PAR]
TESTING ./examples/t6.comp ---
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
DEBug Mode Enabled: (args3)
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
Lexical: File> ./examples/t6.compLexical: File> ./examples/t6.comp05: <"start", START>
06: <"int", TYPE INT>
symboltable: new Lexeme Token [x] type (ID, UNASSIGNED)
	 - init as TKN_NONE
06: <"x", ID>
06: <",", COMMA>
symboltable: new Lexeme Token [y] type (ID, UNASSIGNED)
	 - init as TKN_NONE
06: <"y", ID>
06: <";", SEMICOLON>
07: <"int", TYPE INT>
symboltable: new Lexeme Token [soma] type (ID, UNASSIGNED)
	 - init as TKN_NONE
07: <"soma", ID>
07: <"=", ASSIGN>
07: <"0", INT>
07: <",", COMMA>
symboltable: new Lexeme Token [media] type (ID, UNASSIGNED)
	 - init as TKN_NONE
07: <"media", ID>
07: <"=", ASSIGN>
07: <"0", INT>
07: <",", COMMA>
symboltable: new Lexeme Token [mult] type (ID, UNASSIGNED)
	 - init as TKN_NONE
07: <"mult", ID>
07: <"=", ASSIGN>
07: <"0", INT>
07: <";", SEMICOLON>
08: <"scan", SCAN>
08: <"(", OPEN_PAR>
symboltable: new Lexeme Token [x] type (ID, UNASSIGNED)
	 - returned
08: <"x", ID>
08: <")", CLOSE_PAR>
08: <";", SEMICOLON>
09: <"scan", SCAN>
09: <"(", OPEN_PAR>
symboltable: new Lexeme Token [b] type (ID, UNASSIGNED)
	 - init as TKN_NONE
09: <"b", ID>
09: <")", CLOSE_PAR>
09: <";", SEMICOLON>
symboltable: new Lexeme Token [soma] type (ID, UNASSIGNED)
	 - returned
11: <"soma", ID>
11: <"=", ASSIGN>
symboltable: new Lexeme Token [x] type (ID, UNASSIGNED)
	 - returned
11: <"x", ID>
11: <"+", PLUS>
symboltable: new Lexeme Token [y] type (ID, UNASSIGNED)
	 - returned
11: <"y", ID>
11: <";", SEMICOLON>
12: <"print", PRINT>
12: <"(", OPEN_PAR>
symboltable: new Lexeme Token [soma] type (ID, UNASSIGNED)
	 - returned
12: <"soma", ID>
12: <")", CLOSE_PAR>
12: <";", SEMICOLON>
symboltable: new Lexeme Token [media] type (ID, UNASSIGNED)
	 - returned
13: <"media", ID>
13: <"=", ASSIGN>
symboltable: new Lexeme Token [soma] type (ID, UNASSIGNED)
	 - returned
13: <"soma", ID>
13: <"/", DIV>
13: <"2", INT>
13: <";", SEMICOLON>
14: <"print", PRINT>
14: <"(", OPEN_PAR>
symboltable: new Lexeme Token [media] type (ID, UNASSIGNED)
	 - returned
14: <"media", ID>
14: <")", CLOSE_PAR>
14: <";", SEMICOLON>
symboltable: new Lexeme Token [mult] type (ID, UNASSIGNED)
	 - returned
15: <"mult", ID>
15: <"=", ASSIGN>
symboltable: new Lexeme Token [x] type (ID, UNASSIGNED)
	 - returned
15: <"x", ID>
15: <"*", MUL>
symboltable: new Lexeme Token [y] type (ID, UNASSIGNED)
	 - returned
15: <"y", ID>
15: <";", SEMICOLON>
16: <"print", PRINT>
16: <"(", OPEN_PAR>
symboltable: new Lexeme Token [mult] type (ID, UNASSIGNED)
	 - returned
16: <"mult", ID>
16: <")", CLOSE_PAR>
16: <";", SEMICOLON>
17: <"exit", EXIT>
17: <"", END_OF_FILE>
<procProgram>
	eat +START | curr =START - 'start'
	<procDeclList>
		<procDecl>
			<procType>
				eat +TYPE INT | curr =TYPE INT - 'int'
symboltable: new Lexeme Token [x] type (ID, UNASSIGNED)
	 - returned
			<procIdentList>
smntc: checkLexeme [x](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'x'
				eat +COMMA | curr =COMMA - ','
symboltable: new Lexeme Token [y] type (ID, UNASSIGNED)
	 - returned
smntc: checkLexeme [y](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'y'
			eat +SEMICOLON | curr =SEMICOLON - ';'
		<procDecl>
			<procType>
				eat +TYPE INT | curr =TYPE INT - 'int'
symboltable: new Lexeme Token [soma] type (ID, UNASSIGNED)
	 - returned
			<procIdentList>
smntc: checkLexeme [soma](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'soma'
			eat +SEMICOLON | curr =ASSIGN - '='
showError
07: Unexpected Lexeme [=]
exec: DERIVATION TREE incomplete
Expected Lexeme [SEMICOLON]
TESTING ./examples/t7.comp ---
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
DEBug Mode Enabled: (args3)
symboltable: new Lexeme Token [;] type (SEMICOLON, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [(] type (OPEN_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [)] type (CLOSE_PAR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [{] type (OPEN_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [}] type (CLOSE_CUR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [.] type (DOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [,] type (COMMA, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [=] type (ASSIGN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [==] type (EQ, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<>] type (NE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [!] type (NOT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [+] type (PLUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [-] type (MINUS, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [*] type (MUL, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [/] type (DIV, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [&&] type (AND, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [||] type (OR, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>] type (GT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<] type (LT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [>=] type (GE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [<=] type (LE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [start] type (START, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [exit] type (EXIT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [if] type (IF, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [then] type (THEN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [else] type (ELSE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [end] type (END, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [do] type (DO, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [while] type (WHILE, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [scan] type (SCAN, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [print] type (PRINT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [int] type (TYPE INT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [float] type (TYPE FLOAT, NONE)
	 - init as TKN_NONE
symboltable: new Lexeme Token [string] type (TYPE STRING, NONE)
	 - init as TKN_NONE
Lexical: File> ./examples/t7.compLexical: File> ./examples/t7.comp01: <"start", START>
02: <"int", TYPE INT>
symboltable: new Lexeme Token [x] type (ID, UNASSIGNED)
	 - init as TKN_NONE
02: <"x", ID>
02: <";", SEMICOLON>
03: <"int", TYPE INT>
symboltable: new Lexeme Token [y] type (ID, UNASSIGNED)
	 - init as TKN_NONE
03: <"y", ID>
03: <";", SEMICOLON>
04: <"int", TYPE INT>
symboltable: new Lexeme Token [x] type (ID, UNASSIGNED)
	 - returned
04: <"x", ID>
04: <";", SEMICOLON>
05: <"exit", EXIT>
05: <"", END_OF_FILE>
<procProgram>
	eat +START | curr =START - 'start'
	<procDeclList>
		<procDecl>
			<procType>
				eat +TYPE INT | curr =TYPE INT - 'int'
symboltable: new Lexeme Token [x] type (ID, UNASSIGNED)
	 - returned
			<procIdentList>
smntc: checkLexeme [x](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'x'
			eat +SEMICOLON | curr =SEMICOLON - ';'
		<procDecl>
			<procType>
				eat +TYPE INT | curr =TYPE INT - 'int'
symboltable: new Lexeme Token [y] type (ID, UNASSIGNED)
	 - returned
			<procIdentList>
smntc: checkLexeme [y](NONE) to type (TYPE INT)
				<procIdentifier>
					eat +ID | curr =ID : 'y'
			eat +SEMICOLON | curr =SEMICOLON - ';'
		<procDecl>
			<procType>
				eat +TYPE INT | curr =TYPE INT - 'int'
symboltable: new Lexeme Token [x] type (ID, UNASSIGNED)
	 - returned
			<procIdentList>
smntc: checkLexeme [x](TYPE INT) to type (TYPE INT)
smntc error: Lexeme Token dType already declared [x]
symbolTable Identifiers
.1 x -:- (ID, TYPE INT)
.2 y -:- (ID, TYPE INT)
