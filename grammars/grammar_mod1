program ::= start [decl-list] stmt-list exit
decl-list ::= decl {decl}
decl ::= type ident-list ";"
ident-list ::= identifier {"," identifier}
type ::= int | float | string
stmt-list ::= stmt {stmt}
stmt ::= assign-stmt ";" | if-stmt | while-stmt 
 | read-stmt ";" | write-stmt ";"
assign-stmt ::= identifier "=" simple-expr

--
if-stmt ::= if condition then stmt-list end
 | if condition then stmt-list else stmt-list end
-- ^ left factoring v --
if-stmtA ::= if condition then stmt-list if-stmtB
if-stmtB ::= end | else stmt-list end
--

condition ::= expression
while-stmt ::= do stmt-list stmt-sufix
stmt-sufix ::= while condition end
read-stmt ::= scan "(" identifier ")"
write-stmt ::= print "(" writable ")"
writable ::= simple-expr | literal

--
expression ::= simple-expr | simple-expr relop simple-expr
-- ^ left factoring v --
expressionA ::= simple-expr expressionB
expressionB ::= relop simple-exprA
--

--
simple-expr ::= term | simple-expr addop term
-- ^ eliminate left recursion v --
simple-exprA ::= term simple-exprB
simple-exprB ::= addop term simple-exprB
--

--
term ::= factor-a | term mulop factor-a
-- ^ eliminate left recursion v --
termA ::= factor-a termB
termB ::= mulop termB
--

fator-a ::= factor | "!" factor | "-" factor
factor ::= identifier | constant | "(" expression ")"
relop ::= "==" | ">" | ">=" | "<" | "<=" | "<>"
addop ::= "+" | "-" | "||"
mulop ::= "*" | "/" | "&&"
constant ::= integer_const | float_const | literal
integer_const ::= digit+
float_const ::= digit+“.”digit+

literal ::= " { " {caractere} " } "

identifier ::= (letter | _ ) (letter | digit )*
letter ::= [A-za-z]
digit ::= [0-9]
caractere ::= um dos caracteres ASCII, exceto quebra de linha